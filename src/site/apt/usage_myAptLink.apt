 ---
 Usage: myAptLink
 ---
 blerubrus (with bworld-myApt)
 ---
 2016-01-09

Usage: myAptLink

 This usage of myApt program aims at quickly writing links in apt format for various purposes:

   * an existing file under the "<<<src/site/resources/>>>" hierarchy;

   * all files under a given existing directory under the "<<<src/site/resources/>>>" hierarchy;

   * an existing apt file in the <<<src/site/apt/>>> hierarchy: the link will consider the "html" version of this file that will be generated by the "<<mvn site>> command;

   * an URL starting with http.

 The 
 {{{./myAptLink.sh}myAptLink.sh}} script prepares the options for the <<myApt.jar>>. This script is optimized to be executed at the root location of a maven project, where the "<<<pom.xml>>>" is located. It expects 1 or 2 parameters:

   * "<<<linkTo>>>" : the pointed source. Examples:

      * a resource (as meant by the maven web site) source file: <<<src/site/resources/testFile>>>

      * a resource source directory: <<<src/site/resources/myDir>>>

      * an apt source file: <<<src/site/apt/index.apt>>>

      * an URL starting with "http": <<<http://coucou.org>>>

   * "<<<linkLabel>>>": optional. Encouraged for long URLs.

 This myAptLink script is particularly useful while writing apt source file, for example in vim. In "command" mode, the "<<:r!myAptLink>>" input parameters can be auto-completed, which is very convenient to insert a link to another apt page, or to a resource file with a particular label without any type-mistake when entering the path...


~~===

~~ Table of Contents

~~%{toc|fromDepth=2}

===

 Usage examples:
 
   * Typing: <<myAptLink param>> where <<<param>>> is a path to an existing file (ideally in the "<<<src/site/resources/>>>" or "<<<src/site/apt/>>>" folder  of a maven project) generates the apt code for a link to this file. Examples:

      * creating a link to a file under the "<<<src/site/resources/>>>" hierarchy:
 
+--+
$ myAptLink src/site/resources/myDir/myFile
 {{{./myDir/myFile}myFile}}
+--+

      Note that if the extension of the target file is one of the supported image file extension (png svg gif jpg jpeg), the output will
      also display the apt code to display the image. Example:

+--+
$ myAptLink src/site/resources/myDir/myImageFile.png
 {{{./myDir/myImageFile.png}myImageFile.png}}
   
[./myDir/myImageFile.png]
+--+

      * creating a link to the html version expected to be generated from an apt file (the label crops the extension ".apt"):

+--+
$ myAptLink src/site/index.apt
 {{{./index.html}index}}
+--+

   * Typing <<myAptLink param1 param2>> generates the apt code for a link to the file given as argument, with a label of the link
   given as second argument. Examples:

      * a file under the "<<<src/site/resources>>>" hierarchy:
 
+--+
$ myAptLink src/site/resources/myDir/myFile label
 {{{./myDir/myFile}label}}
+--+

      * a file under the "<<<src/site/apt/>>>" folder:

+--+
$ myAptLink src/site/apt/index.apt Home
 {{{./index.html}Home}}
+--+



   * Typing <<myAptLink param>> where <<<param>>> is a path to an existing directory in the "<<<src/site/resources/>>>" folder of the maven project generates the apt code of a recursive listing of links to each file in the directory ("<<<.svn>>>" and "<<<.git>>>" sub folders 
   are ignored). For image files
   (if the extension of the file is one of png svg jpg gif jpeg), the apt code to display this image in the generated html
   is added to the item. Example:  
 
+--+
$ myAptLink src/site/resources/myDir/

 Folder {{{./myDir/}<<<myDir>>>}}:
   
   * {{{./myDir/myImageFile.png}myImageFile.png}}
   
[./myDir/myImageFile.png]

   * {{{./myDir/myFile}myFile}}
+--+


   * Expected result for an input parameter starting with "http" (since 2017-06-01): the program automatically adds the date between parenthesis (bibliography common usage):

+--+
$ myAptLink http://toto.org titi
 {{{http://toto.org}titi}} (2017-06-01)
+--+

